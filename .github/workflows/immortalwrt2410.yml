name: immortalwrt2410

on:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: op.config
  DIY_P1_SH: sh/op.sh
  DIY_P2_SH: sh/oc.sh
  DIY_P3_SH: sh/ad.sh
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: ÈáäÊîæÁ£ÅÁõòÁ©∫Èó¥
      run: |
        sudo rm -rf /etc/apt/sources.list.d
        sudo swapoff -a
        sudo rm -f /swapfile /mnt/swapfile
        sudo docker image prune -a -f
        sudo systemctl stop docker
        sudo snap set system refresh.retain=2
        sudo apt-get -y purge firefox clang* ghc* google* llvm* mono* mongo* mysql* php*
        sudo apt-get -y autoremove --purge
        sudo apt-get clean
        sudo rm -rf /etc/mysql /etc/php /usr/lib/jvm /usr/libexec/docker /usr/local /usr/src/* /var/lib/docker /var/lib/gems /var/lib/mysql /var/lib/snapd /etc/skel /opt/{microsoft,az,hostedtoolcache,cni,mssql-tools,pipx} /usr/share/{az*,dotnet,swift,miniconda,gradle*,java,kotlinc,ri,sbt} /root/{.sbt,.local,.npm}
        sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
        rm -rf ~/{.cargo,.dotnet,.rustup}
        df -Th
        
    - name: Ê£ÄÊü•ÂàÜÊîØ
      uses: actions/checkout@main

    - name: ÁºñËØëÁéØÂ¢É
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get update
        sudo apt-get install -y tar img2simg build-essential flex bison cmake g++ gawk gcc-multilib g++-multilib gettext git libfuse-dev libncurses5-dev libssl-dev python3 python3-pip python3-ply python3-distutils python3-pyelftools rsync unzip zlib1g-dev file wget subversion patch upx-ucl autoconf automake curl asciidoc binutils bzip2 lib32gcc-s1 libc6-dev-i386 uglifyjs msmtp texinfo libreadline-dev libglib2.0-dev xmlto libelf-dev libtool autopoint antlr3 gperf ccache swig coreutils haveged scons libpython3-dev rename qemu-utils
        sudo apt-get clean
        git config --global user.name 'GitHub Actions' && git config --global user.email 'noreply@github.com'
        sudo timedatectl set-timezone 'Asia/Shanghai'
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        df -Th

    - name: ÂÖãÈöÜÊ∫ê‰ª£Á†Å
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH immortalwrt
        ln -sf /workdir/immortalwrt $GITHUB_WORKSPACE/immortalwrt 
        
    - name: Ê∑ªÂä†Áé©ÂÆ¢‰∫ë
      run: |
        [ -e target ] && cp -rf target immortalwrt/          
        
    - name: Âä†ËΩΩËá™ÂÆö‰πâËÑöÊú¨
      run: |
        chmod +x $DIY_P1_SH
        cd immortalwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

#    - name: ‰∏ãËΩΩocÂÜÖÊ†∏
#      run: |
#        chmod +x $DIY_P2_SH
#        $GITHUB_WORKSPACE/$DIY_P2_SH        
        
#    - name: ‰∏ãËΩΩadÊ†∏ÂøÉ
#      run: |
#        chmod +x $DIY_P3_SH
#        $GITHUB_WORKSPACE/$DIY_P3_SH       

    - name: Âä†ËΩΩËá™ÂÆö‰πâÈÖçÁΩÆ
      run: |
        [ -e files ] && mv files immortalwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE immortalwrt/.config                 

        
    - name: ‰∏ãËΩΩÁºñËØë‰æùËµñ
      id: package
      run: |
        cd immortalwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    
    - name: ÁºñËØëÂõ∫‰ª∂
      id: compile
      run: |
        cd immortalwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV


    - name: ÊâìÂåÖÁõ¥Âà∑ÂåÖ
      run: |
          sudo apt install img2simg
          ver="v0.3.1"
          curl -L -o ./AmlImg https://github.com/hzyitc/AmlImg/releases/download/$ver/AmlImg_${ver}_linux_amd64
          chmod +x ./AmlImg
          curl -L -o ./uboot.img https://github.com/shiyu1314/u-boot-onecloud/releases/download/build-20230901-0443/eMMC.burn.img
          ./AmlImg unpack ./uboot.img burn/
          echo "::endgroup::"
          gunzip immortalwrt/bin/targets/*/*/*.gz
          diskimg=$(ls immortalwrt/bin/targets/*/*/*.img)
          loop=$(sudo losetup --find --show --partscan $diskimg)
          img_ext="immortalwrt.img"
          img_mnt="xd"
          rootfs_mnt="img"
          boot_img=$1${img_ext}
          boot_img_mnt=$1${img_mnt}
          rootfs_img_mnt=$1${rootfs_mnt}
          echo ${boot_img}
          echo ${boot_img_mnt}
          echo ${rootfs_img_mnt}
          sudo rm -rf ${boot_img}
          sudo rm -rf ${boot_img_mnt}
          sudo rm -rf ${rootfs_img_mnt}
          sudo dd if=/dev/zero of=${boot_img} bs=1M count=600
          sudo mkfs.ext4 ${boot_img}
          sudo mkdir ${boot_img_mnt}
          sudo mkdir ${rootfs_img_mnt}
          sudo mount ${boot_img} ${boot_img_mnt}
          sudo mount ${loop}p2 ${rootfs_img_mnt}
          cd ${rootfs_img_mnt}
          sudo cp -r * ../${boot_img_mnt}
          cd ..
          sudo sync
          sudo umount ${boot_img_mnt}
          sudo umount ${rootfs_img_mnt}
          sudo img2simg ${loop}p1 burn/boot.simg
          sudo img2simg openwrt.img burn/rootfs.simg
          sudo rm -rf *.img
          sudo losetup -d $loop
          cat <<EOF >>burn/commands.txt
          PARTITION:boot:sparse:boot.simg
          PARTITION:rootfs:sparse:rootfs.simg
          EOF
          prefix=$(ls immortalwrt/bin/targets/*/*/*.img | sed 's/\.img$//')
          burnimg=${prefix}.burn.img
          ./AmlImg pack $burnimg burn/
          for f in immortalwrt/bin/targets/*/*/*.burn.img; do
            sha256sum "$f" >"${f}.sha"
            xz -9 --threads=0 --compress "$f"
          done
          sudo rm -rf immortalwrt/bin/targets/*/*/*.img
          sudo rm -rf immortalwrt/bin/targets/*/*/*.gz

    - name: Êü•ÁúãÁ£ÅÁõò‰ΩøÁî®ÊÉÖÂÜµ
      if: (!cancelled())
      run: df -hT

    - name: Êï¥ÁêÜÊñá‰ª∂
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd immortalwrt/bin/targets/*/*
        rm -rf packages
        rm -rf *.buildinfo
        rm -rf profiles.json
        rm -rf *.manifest
        rm -rf *.sha
        rm -rf sha256sums
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
    
    - name: ‰∏ä‰º†Êñá‰ª∂Âà∞Actions
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: Immortalwrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
        
    - name: ÁîüÊàêReleasesÊ†áÁ≠æ
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "üîó [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "üîó [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT
    
    - name: ‰∏ä‰º†Âõ∫‰ª∂Âà∞Releases
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*
              
        
#    - name: Ê∏ÖÁêÜReleases
#      uses: dev-drprasad/delete-older-releases@master
#      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
#      with:
#        keep_latest: 1
#        delete_tags: true
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
